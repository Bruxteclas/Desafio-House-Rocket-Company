import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import seaborn as sns
from datetime import datetime 
from streamlit_folium import folium_static
import pydeck as pdk


# Configura√ß√£o da P√°gina
st.set_page_config(
    page_title="House Rocket Analytics",
    layout="wide",
    page_icon="üè†",
    initial_sidebar_state="expanded"
)

# Estilo Personalizado
st.markdown("""
<style>
    .st-emotion-cache-1v0mbdj img {
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .st-bh {
        background-color: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

  # Carregar os dados
@st.cache_data
def carregar_dados():
    df = pd.read_csv("kc_house_data_updat.csv")
    df["date"] = pd.to_datetime(df["date"], format="%d-%m-%Y")
    df["year"] = df["date"].dt.year  # Garanta que esta linha existe
    return df

df = carregar_dados()
 
# Criar abas
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["üìå Contexto do Neg√≥cio", "üè° Estrat√©gia de Compra", "üìà Melhor Momento para Compra e Venda", "üõ†Ô∏è Impacto das Reformas", "üó∫Ô∏è An√°lise Geogr√°fica", "üéØ Insights"])

# =========================================
#        ABA 1: Contexto do Neg√≥cio
# =========================================
with tab1:
    st.title("üè† House Rocket - Contexto do Neg√≥cio e Resultados")
    st.markdown("---")

    # üìå Contexto do Projeto
    st.header("üìå Contexto do Neg√≥cio")
    st.markdown(
        """
        **O House Rocket** √© um projeto baseado em an√°lise de dados hist√≥ricos de vendas de im√≥veis. O objetivo √© usar essas informa√ß√µes para identificar as oportunidades de **compra de im√≥veis**, determinar o momento ideal para **vend√™-los** e analisar o **impacto das reformas** no valor das propriedades.

        Os dados analisados s√£o **de maio/2014 a maio/2015**, considerando **pre√ßos, localiza√ß√£o, caracter√≠sticas das propriedades**
        e **sazonalidade das vendas**.
        """
    )

    # üéØ Perguntas de Neg√≥cio
    st.subheader("üéØ Perguntas de Neg√≥cio")
    st.markdown("""
    - **Quais casas o CEO da House Rocket deveria comprar e por qual pre√ßo?**
    - **Quando √© o melhor momento para vender as casas adquiridas?**
    - **A House Rocket deveria investir em reformas?** Se sim, **quais melhorias aumentam mais o valor de revenda?**
    """)
    st.markdown("---")

# =========================================
#         ABA 2: Estrat√©gia de Compra
# =========================================
with tab2:
    st.title("üè° Estrat√©gia de Compra - House Rocket")
    st.markdown("---")

   

    
    # Tabela das casas recomendadas
    st.subheader("üìã Lista de Casas Recomendadas")
    casas_recomendadas = {
        "√çndice": [8978, 9077, 7178, 16580, 18102, 434, 8846, 892, 19687, 1752,
                   1868, 11754, 2205, 8676, 3821, 5598, 15579, 19367, 20631, 19757],
        "Pre√ßo ($)": [169100, 182500, 190000, 190000, 194250, 196000, 204700, 205000,
                      205000, 206000, 210000, 210000, 213550, 214000, 215000, 215000,
                      215000, 215000, 215000, 216000],
        "M√©dia da Regi√£o ($)": [267711.90] * 20,
        "Zipcode": [98001] * 20,
        "Quartos": [3, 3, 3, 4, 3, 3, 4, 3, 4, 4, 3, 4, 3, 3, 4, 4, 3, 4, 3, 4],
        "Banheiros": [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
        "Condi√ß√£o": [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3],
        "Constru√ß√£o (Grade)": [7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
        "Vista (View)": [0] * 20,
        "Frente d‚Äô√°gua (Waterfront)": [0] * 20
    }
    df_recomendadas = pd.DataFrame(casas_recomendadas)
    st.dataframe(df_recomendadas)

 
# --------------------------------------------
# Pr√©-processamento (igual ao do Jupyter)
# --------------------------------------------

    # 1. Calcular m√©dia regional (log)
    df['log_price'] = np.log1p(df['price'])
    df['avg_price_region_log'] = df.groupby('zipcode')['log_price'].transform('mean')

    # 2. Filtrar im√≥veis
    below_avg_price = df['log_price'] < df['avg_price_region_log']
    good_houses = df[
        below_avg_price &
        (df['grade'] >= 7) &
        (df['condition'] >= 3) &
        (df['bedrooms'].isin([3, 4])) &
        (df['bathrooms'] >= 2)
    ].copy()

    # 3. Converter valores
    good_houses['price'] = np.expm1(good_houses['log_price'])
    good_houses['avg_price_region'] = np.expm1(good_houses['avg_price_region_log'])

    # 4. Ordenar e selecionar colunas
    final_selection = good_houses.sort_values(['zipcode', 'price'])[[
        'price', 'avg_price_region', 'zipcode', 'bedrooms', 
        'bathrooms', 'condition', 'grade', 'view', 'waterfront'
    ]]

    # 5. Calcular ROI
    indices_desejados = [8978, 9077, 7178, 16580, 18102, 434, 8846, 892,
                        19687, 1752, 1868, 11754, 2205, 8676, 3821, 5598,
                        15579, 19367, 20631, 19757]

    final_selection_filtered = final_selection.loc[indices_desejados].copy()
    final_selection_filtered['ROI (%)'] = ((final_selection_filtered['avg_price_region'] - 
                                          final_selection_filtered['price']) / 
                                         final_selection_filtered['price']) * 100

    # --------------------------------------------
    # Gr√°fico de ROI Original
    # --------------------------------------------
    st.header("Retorno sobre Investimento (ROI)")
    with st.container():
        fig, ax = plt.subplots(figsize=(14, 6))
        ax.scatter(
            range(len(final_selection_filtered.index)),
            final_selection_filtered['ROI (%)'],
            color='#2ecc71',
            s=150,
            alpha=0.7,
            edgecolor='black'
        )
        
        for i, roi in enumerate(final_selection_filtered['ROI (%)']):
            ax.text(
                x=i,
                y=roi + 1.5,
                s=f"{roi:.1f}%",
                ha='center',
                fontsize=10,
                fontweight='bold'
            )
        
        ax.set_ylim(0, final_selection_filtered['ROI (%)'].max() + 10)
        ax.set_title("Potencial de Retorno por Propriedade", fontsize=16, pad=20)
        ax.set_xlabel("√çndice da Propriedade", fontsize=12)
        ax.set_ylabel("ROI Esperado (%)", fontsize=12)
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        ax.set_facecolor('#f5f6fa')
        plt.xticks(
            range(len(final_selection_filtered.index)),
            labels=final_selection_filtered.index,
            rotation=45,
            fontsize=10
        )
        st.pyplot(fig)

    # =========================================
    #       NOVOS GR√ÅFICOS ADICIONADOS
    # =========================================
    
    # Gr√°fico 1: Compara√ß√£o de Pre√ßos M√©dios
    st.subheader("üìä Compara√ß√£o de Pre√ßos M√©dios por Regi√£o")
    
    # C√°lculo dos pre√ßos m√©dios
    region_prices = df.groupby('zipcode')['price'].mean().reset_index()
    region_prices_sorted = region_prices.sort_values(by='price', ascending=False)
    top_10_regions = region_prices_sorted.head(10)

    # Garantir que a regi√£o 98001 est√° inclu√≠da
    if 98001 not in top_10_regions['zipcode'].values:
        region_98001 = region_prices[region_prices['zipcode'] == 98001]
        top_10_regions = pd.concat([top_10_regions, region_98001])

    # Configurar cores
    colors = ['#FF6B6B' if zipcode == 98001 else '#4ECDC4' for zipcode in top_10_regions['zipcode']]

    # Plotar com Matplotlib
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    ax1.bar(
        top_10_regions['zipcode'].astype(str), 
        top_10_regions['price'],
        color=colors,
        edgecolor='grey'
    )
    
    # Customiza√ß√£o do gr√°fico
    ax1.set_title('Top 10 Regi√µes com Maiores Pre√ßos M√©dios vs Regi√£o 98001', pad=20)
    ax1.set_xlabel('CEP da Regi√£o', labelpad=10)
    ax1.set_ylabel('Pre√ßo M√©dio (US$)', labelpad=10)
    ax1.grid(axis='y', alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig1)
    
    # Gr√°fico 2: Taxa de Valoriza√ß√£o Hist√≥rica
    st.subheader("üìà Taxa de Valoriza√ß√£o Anual por Regi√£o")
    
    # C√°lculo da valoriza√ß√£o
    price_by_year = df.groupby(['zipcode', 'year'])['price'].mean().reset_index()
    price_by_year['pct_change'] = price_by_year.groupby('zipcode')['price'].pct_change()
    
    # Dados para 98001
    zipcode_98001 = price_by_year[price_by_year['zipcode'] == 98001]
    avg_pct_change_98001 = zipcode_98001['pct_change'].mean()
    
    # Compara√ß√£o com outras regi√µes
    comparison = price_by_year.groupby('zipcode')['pct_change'].mean().reset_index()
    comparison = comparison.sort_values('pct_change', ascending=False)
    
    # Criar figura
    fig2, ax2 = plt.subplots(figsize=(12, 6))
    
    # Plotar com Seaborn
    sns.barplot(
        data=comparison.head(10),
        x='zipcode',
        y='pct_change',
        palette='Blues_d',
        ax=ax2
    )
    
    # Linha de refer√™ncia
    ax2.axhline(
        avg_pct_change_98001,
        color='#FF6B6B',
        linestyle='--',
        linewidth=2,
        label=f'CEP 98001 ({avg_pct_change_98001:.1%})'
    )
    
    # Customiza√ß√£o
    ax2.set_title('Taxa M√©dia de Valoriza√ß√£o Anual Comparativa', pad=15)
    ax2.set_xlabel('CEP da Regi√£o', labelpad=10)
    ax2.set_ylabel('Valoriza√ß√£o M√©dia Anual', labelpad=10)
    ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x:.0%}'))
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    st.pyplot(fig2)

    # Exibir m√©trica destacada
    st.metric(label="**Valoriza√ß√£o M√©dia Anual do CEP 98001**", 
              value=f"{avg_pct_change_98001:.1%}")

    # --------------------------------------------
    # Tabela Interativa
    # --------------------------------------------
    st.header("üîç Detalhes das Propriedades Selecionadas")

    # Adicionar filtros
    col1, col2 = st.columns(2)
    with col1:
        min_roi = st.slider(
            "Filtrar por ROI M√≠nimo (%):",
            min_value=0,
            max_value=int(final_selection_filtered['ROI (%)'].max()),
            value=0
        )

    with col2:
        selected_zipcode = st.selectbox(
            "Filtrar por Regi√£o:",
            options=['Todas'] + list(final_selection_filtered['zipcode'].unique())
        )

    # Aplicar filtros
    filtered_data = final_selection_filtered
    if selected_zipcode != 'Todas':
        filtered_data = filtered_data[filtered_data['zipcode'] == selected_zipcode]
    filtered_data = filtered_data[filtered_data['ROI (%)'] >= min_roi]

    # Exibir tabela
    st.dataframe(
        filtered_data.style.format({
            'price': '${:,.2f}',
            'avg_price_region': '${:,.2f}',
            'ROI (%)': '{:.1f}%'
        }),
        height=400,
        use_container_width=True
    )

    # Estat√≠sticas Resumidas
    st.subheader("üìä Estat√≠sticas Chave")
    cols = st.columns(3)
    cols[0].metric("Maior ROI", f"{filtered_data['ROI (%)'].max():.1f}%")
    cols[1].metric("ROI M√©dio", f"{filtered_data['ROI (%)'].mean():.1f}%")
    cols[2].metric("Propriedades Filtradas", filtered_data.shape[0])

# =========================================
#          ABA 3: Melhor Momento para Venda
# =========================================
with tab3:
    st.title("üìà An√°lise de Sazonalidade")
    st.markdown("---")

    # Criar coluna de ano
    df['year'] = df['date'].dt.year

    anos_disponiveis = sorted(df['year'].unique())
    selected_year = st.selectbox('Selecione o ano', anos_disponiveis)

    df_filtered = df[df['year'] == selected_year].copy()

    if df_filtered.empty:
        st.error(f"N√£o h√° dados para o ano {selected_year}.")
    else:
        df_filtered['month'] = df_filtered['date'].dt.month
        monthly_avg_price = df_filtered.groupby('month', as_index=False)['price'].mean()

        if not monthly_avg_price.empty:
            best_month_sell = monthly_avg_price.loc[monthly_avg_price['price'].idxmax()]
            best_month_buy = monthly_avg_price.loc[monthly_avg_price['price'].idxmin()]

            fig = px.line(monthly_avg_price, x='month', y='price', markers=True, title=f'An√°lise Sazonal de Pre√ßos em {selected_year}')
            fig.add_vline(x=best_month_sell['month'], line_dash='dash', line_color='red', annotation_text=f'Melhor M√™s para Vender ({int(best_month_sell["month"])})')
            fig.add_vline(x=best_month_buy['month'], line_dash='dash', line_color='green', annotation_text=f'Melhor M√™s para Comprar ({int(best_month_buy["month"])})')

            st.plotly_chart(fig)


# =========================================
#         ABA 4: Impacto das Reformas
# =========================================
with tab4:
    st.title("üõ†Ô∏è An√°lise do Impacto das Reformas")
    st.markdown("---")

    # ============================
    # üìå **Casas com Potencial para Reforma**
    # ============================
    st.subheader("üè† Casas com Potencial para Reforma")

    # Criar a coluna `avg_price_region_log` caso necess√°rio
    if 'avg_price_region_log' not in df.columns:
        df['avg_price_region_log'] = df.groupby('condition')['price'].transform('mean')

    # Filtrar as casas que t√™m potencial para reforma
    casas_reforma = df[['price', 'avg_price_region_log', 'condition', 'grade']].sort_values('condition')

    # Exibir a tabela no Streamlit
    st.dataframe(casas_reforma)

    # ==============================
    # üìå **Impacto da Condi√ß√£o e Qualidade**
    # ==============================
    st.subheader("üìä Impacto da Condi√ß√£o e Qualidade no Pre√ßo")

    # Calcular impacto da condi√ß√£o no pre√ßo
    condition_impact = df.groupby('condition')['price'].mean().reset_index()
    condition_impact.rename(columns={'price': 'avg_price_condition'}, inplace=True)
    condition_impact = condition_impact.sort_values(by='condition')  # Garantir ordem correta

    # Calcular impacto da qualidade (grade) no pre√ßo
    grade_impact = df.groupby('grade')['price'].mean().reset_index()
    grade_impact.rename(columns={'price': 'avg_price_grade'}, inplace=True)
    grade_impact = grade_impact.sort_values(by='grade')  # Garantir ordem correta

    col1, col2 = st.columns(2)

    # **Gr√°fico: Impacto da Condi√ß√£o no Pre√ßo**
    with col1:
        fig, ax = plt.subplots(figsize=(8, 6))  # Ajustar tamanho do gr√°fico
        ax.bar(condition_impact['condition'], condition_impact['avg_price_condition'], color='skyblue')
        ax.set_title("Impacto da Condi√ß√£o no Pre√ßo M√©dio")
        ax.set_xlabel("Condi√ß√£o")
        ax.set_ylabel("Pre√ßo M√©dio (R$)")
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        ax.ticklabel_format(style='plain', axis='y')  # Remover nota√ß√£o cient√≠fica
        st.pyplot(fig)

    # **Gr√°fico: Impacto da Qualidade no Pre√ßo**
    with col2:
        fig, ax = plt.subplots(figsize=(8, 6))  # Ajustar tamanho do gr√°fico
        ax.bar(grade_impact['grade'], grade_impact['avg_price_grade'], color='salmon')
        ax.set_title("Impacto da Qualidade no Pre√ßo M√©dio")
        ax.set_xlabel("Qualidade (Grade)")
        ax.set_ylabel("Pre√ßo M√©dio (R$)")
        ax.grid(axis='y', linestyle='--', alpha=0.7)
        ax.ticklabel_format(style='plain', axis='y')  # Remover nota√ß√£o cient√≠fica
        st.pyplot(fig)

    # ==============================
    # üìå **Calcular Incrementos de Pre√ßo**
    # ==============================

    # **Adicionar o incremento estimado ao melhorar a condi√ß√£o**
    df = df.merge(condition_impact, on='condition', how='left')
    df['price_increment_condition'] = df['avg_price_condition'] - df['price']

    # **Adicionar o incremento estimado ao melhorar a qualidade**
    df = df.merge(grade_impact, on='grade', how='left')
    df['price_increment_grade'] = df['avg_price_grade'] - df['price']

    # **Gerar a tabela de sugest√µes de melhoria**
    improvement_suggestions = df[['condition', 'grade', 'price_increment_condition', 'price_increment_grade']].sort_values(
        by=['price_increment_condition', 'price_increment_grade'], ascending=False
    )

    # ==============================
    # üìå **Incremento do Pre√ßo por Condi√ß√£o e Qualidade**
    # ==============================
    st.subheader("üìà Incremento do Pre√ßo por Melhoria de Condi√ß√£o e Qualidade")

    # Selecionar as 10 casas com maior impacto na reforma
    top_improvements = improvement_suggestions.head(10)

    # Criando o gr√°fico de barras
    fig, ax = plt.subplots(figsize=(10, 6))

    # Criar o gr√°fico de barras comparando os incrementos
    sns.barplot(data=top_improvements, 
                x='condition', 
                y='price_increment_condition', 
                color='skyblue', 
                label='Incremento pela Condi√ß√£o', 
                alpha=0.7, ax=ax)

    sns.barplot(data=top_improvements, 
                x='condition', 
                y='price_increment_grade', 
                color='orange', 
                label='Incremento pela Qualidade (Grau)', 
                alpha=0.7, ax=ax)

    # Adicionando t√≠tulo e r√≥tulos
    ax.set_title('Incremento no Pre√ßo de Casas por Melhoria de Condi√ß√£o e Qualidade (Grau)', fontsize=14)
    ax.set_xlabel('Condi√ß√£o', fontsize=12)
    ax.set_ylabel('Incremento no Pre√ßo (R$)', fontsize=12)
    ax.legend(title='Tipo de Melhoria')

    # Ajustando o layout
    plt.tight_layout()

    # Exibir o gr√°fico no Streamlit
    st.pyplot(fig)

    # ==============================
    # üìå **Percentual de Aumento P√≥s-Reforma**
    # ==============================
    st.subheader("üìä Percentual de Aumento do Valor Potencial P√≥s-Reforma")

    # Dados fornecidos
    top_10_pos_reforma = pd.DataFrame({
        'price': [7062500.0, 5570000.0, 5350000.0, 5110800.0, 4668000.0, 4500000.0, 4489000.0, 4208000.0, 3800000.0, 4000000.0],
        'preco_pos_reforma': [13418750.0, 11697000.0, 10700000.0, 10221600.0, 9336000.0, 9000000.0, 8978000.0, 8416000.0, 8360000.0, 8000000.0],
        'price_increment_condition': [1412500.0, 1114000.0, 1070000.0, 1022160.0, 933600.0, 900000.0, 897800.0, 841600.0, 1140000.0, 800000.0],
        'price_increment_grade': [4943750.0, 5013000.0, 4280000.0, 4088640.0, 3734400.0, 3600000.0, 3591200.0, 3366400.0, 3420000.0, 3200000.0]
    }, index=[3801, 4280, 1414, 1139, 7878, 2556, 8401, 12031, 6847, 4025])

    # Calcular o percentual de aumento para cada casa
    top_10_pos_reforma['percentual_aumento'] = (
        (top_10_pos_reforma['preco_pos_reforma'] - top_10_pos_reforma['price']) / top_10_pos_reforma['price'] * 100
    )

    # Garantir que os √≠ndices sejam strings para o eixo X
    top_10_pos_reforma = top_10_pos_reforma.reset_index()
    top_10_pos_reforma.rename(columns={'index': 'indice'}, inplace=True)
    top_10_pos_reforma['indice'] = top_10_pos_reforma['indice'].astype(str)

    # Criar o gr√°fico de barras com tamanho e DPI ajustados
    fig, ax = plt.subplots(figsize=(12, 6), dpi=80)  # Tamanho menor e DPI ajustado

    # Plotar o gr√°fico de barras
    sns.barplot(
        x=top_10_pos_reforma['indice'], 
        y=top_10_pos_reforma['percentual_aumento'], 
        palette='viridis', dodge=False, ax=ax
    )

    # Adicionar r√≥tulos com o valor p√≥s-reforma no topo das barras
    for i, row in top_10_pos_reforma.iterrows():
        ax.text(i, row['percentual_aumento'] + 2, f"R${row['preco_pos_reforma']:,.0f}", ha='center', fontsize=9)

    # Configurar t√≠tulo, eixos e limites
    ax.set_title('Percentual de Aumento do Valor Potencial P√≥s-Reforma', fontsize=14)
    ax.set_xlabel('Casas (√çndice)', fontsize=12)
    ax.set_ylabel('Percentual de Aumento (%)', fontsize=12)
    ax.grid(axis='y', linestyle='--', alpha=0.7)

    # Ajustar layout para Streamlit
    plt.tight_layout()

    # Exibir o gr√°fico no Streamlit
    st.pyplot(fig)


# =========================================
#         ABA 5: An√°lise Geogr√°fica
# =========================================
with tab5:
    st.title("üè° An√°lise Geogr√°fica ")
    st.markdown("---")

    # Carregar os dados
    df = pd.read_csv("kc_house_data_updat.csv")
    df['date'] = pd.to_datetime(df['date'], format='%d-%m-%Y')
    df['year'] = df['date'].dt.year

    # Calcular a m√©dia de pre√ßo por regi√£o
    df['avg_price_region'] = df.groupby('zipcode')['price'].transform('mean')  

    # Filtrar as melhores casas abaixo do pre√ßo m√©dio
    below_avg_price = df['price'] < df['avg_price_region']  
    best_houses = df[below_avg_price & (df['condition'] >= 3) & (df['grade'] >= 7)]

    # Criar um mapa interativo com PyDeck
    st.write("### Mapa Interativo das Casas com Melhor Custo-Benef√≠cio")
    layer = pdk.Layer(
        "ScatterplotLayer",
        best_houses,
        get_position=["long", "lat"],
        get_color=[0, 0, 255, 140],
        get_radius=100,
        pickable=True,
        tooltip=True,
    )
    view_state = pdk.ViewState(
        latitude=df['lat'].mean(),
        longitude=df['long'].mean(),
        zoom=10,
        pitch=0,
    )
    r = pdk.Deck(
        layers=[layer], 
        initial_view_state=view_state,
        tooltip={
            "html": "<b>Pre√ßo:</b> ${price}<br><b>M√©dia da Regi√£o:</b> ${avg_price_region}<br><b>Condi√ß√£o:</b> {condition}<br><b>Quartos:</b> {bedrooms}<br><b>Banheiros:</b> {bathrooms}",
            "style": {"color": "white"}
        }
    )
    st.pydeck_chart(r)

    # Mostrar DataFrame com os im√≥veis selecionados
    st.write("### Casas Selecionadas para Compra")
    st.dataframe(best_houses[['price', 'avg_price_region', 'zipcode', 'bedrooms', 'bathrooms', 'condition', 'grade', 'view', 'waterfront']].head(20))

# =========================================
#         ABA 6: Insights 
# =========================================

with tab6:
    st.title("üìä Insights e Recomenda√ß√µes")
    st.markdown("---")
    
    st.subheader("Insight Geral")
    st.write("O CEO da House Rocket pode focar em adquirir im√≥veis que ofere√ßam boas caracter√≠sticas (qualidade de constru√ß√£o e condi√ß√µes favor√°veis) a pre√ßos abaixo da m√©dia regional. As casas recomendadas para compra, localizadas no CEP 98001, apresentam pre√ßos abaixo da m√©dia regional, o que representa uma excelente oportunidade de investimento, com boas margens de valoriza√ß√£o. As propriedades s√£o consistentes em termos de caracter√≠sticas, com predomin√¢ncia de 3 ou 4 quartos e pelo menos 2 banheiros, o que atende a uma grande demanda do mercado, especialmente para fam√≠lias.")

    st.subheader("Valoriza√ß√£o e Reforma")
    st.write("Com rela√ß√£o ao impacto das reformas, √© importante considerar que melhorias na qualidade (grau) t√™m um impacto muito maior no pre√ßo do que as melhorias na condi√ß√£o do im√≥vel. As reformas de qualidade podem resultar em aumentos significativos no valor das propriedades, especialmente para casas com classifica√ß√£o baixa, como grau 5, que podem ser elevadas para grau 6, com um incremento m√©dio no pre√ßo de at√© $219.000.")

    st.subheader("Melhor Momento para Venda e Compra")
    st.write("A an√°lise sazonal revela que o melhor m√™s para vender √© abril, quando os pre√ßos m√©dios atingem seu pico, e o melhor m√™s para compra √© Dezembro a Fevereiro. Isso indica uma janela estrat√©gica para maximizar o lucro na revenda das propriedades adquiridas.")

    st.subheader("Conclus√µes e Recomenda√ß√µes")
    st.write("- Investimento em im√≥veis abaixo da m√©dia regional, como os encontrados no CEP 98001, oferece uma boa margem de lucro.")
    st.write("- Reformas focadas na qualidade (grau) s√£o mais rent√°veis e devem ser priorizadas, pois t√™m um impacto substancial no pre√ßo.")
    st.write("- Monitorar o mercado e vender em abril pode otimizar os retornos, aproveitando a valoriza√ß√£o sazonal do mercado imobili√°rio.")
    st.write("Com essas estrat√©gias, o CEO da House Rocket pode maximizar seus lucros, investindo em propriedades com alto potencial de valoriza√ß√£o e aproveitando as melhores condi√ß√µes do mercado.")
